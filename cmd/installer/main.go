//go:build installer

// Installer is a convenience tool that copies the assertions into a project, so
// they could be used without introducing a direct dependency. The tool
// automatically adds a license header to all copied files, so there is no need
// to include the LICENSE file.
//
// To use installer add the following directive to any .go file in the root of
// your project and run `go generate ./...`:
//
//	go:generate go run -tags=installer github.com/junk1tm/assert/cmd/installer path/to/pkg
//
// Where `path/to/pkg` is the location where you'd like to put the assert
// package, e.g. `.` to put it into the project root (hint: for libraries it's
// better to hide it using `internal`).
package main

import (
	"bufio"
	"errors"
	"fmt"
	"os"
	"strings"

	"github.com/junk1tm/assert"
)

func main() {
	if err := run(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func run() error {
	if len(os.Args) < 2 {
		return errors.New("path to package is not specified")
	}
	path := os.Args[1]

	moduleName, err := readModuleName()
	if err != nil {
		return err
	}

	if err := os.Chdir(path); err != nil {
		return err
	}

	if err := os.MkdirAll("assert/dotimport", 0744); err != nil && !os.IsExist(err) {
		return err
	}

	if err := writeFile("assert/assert.go", assert.MainFile); err != nil {
		return err
	}

	// update the import of the assert package, it is local now.
	supportFile := strings.Replace(assert.SupportFile, "github.com/junk1tm", moduleName, 1)

	if err := writeFile("assert/dotimport/alias.go", supportFile); err != nil {
		return err
	}

	return nil
}

func readModuleName() (string, error) {
	f, err := os.Open("go.mod")
	if err != nil {
		return "", err
	}
	defer f.Close()

	r := bufio.NewReader(f)
	header, err := r.ReadString('\n')
	if err != nil {
		return "", err
	}

	name := strings.TrimPrefix(header, "module ")
	name = strings.TrimSuffix(name, "\n")
	return name, nil
}

func writeFile(name, content string) error {
	f, err := os.Create(name)
	if err != nil {
		return err
	}
	defer f.Close()

	write := func(s string) {
		if err == nil {
			_, err = f.WriteString(s)
		}
	}

	write("/*\n")
	write(assert.LICENSE)
	write("*/\n")
	write("\n")
	write("// Code generated by github.com/junk1tm/assert/cmd/installer. DO NOT EDIT.\n")
	write("\n")
	write(content)

	return err
}
